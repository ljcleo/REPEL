range			::= expr ":" expr | expr ":" expr ":" expr
list_element	::= range | expr
list_elements	::= list_elements "," list_element | list_element
list			::= "[" list_elements "]" | "[" "]"
tuple			::= "[*" list_elements "*] | "[*" "*]"
bytelist		::= "<*" list_elements "*>" | "<*" "*>"
dict_element	::= expr ":" expr
dict_elements	::= dict_elements "," dict_element | dict_element
dictionary		::= "{" dict_elements "}" | "{" "}"
complex			::= list | tuple | bytelist | dictionary
slice_arg		::= ":" expr | ":"
slice_extras	::= slice_arg slice_arg | slice_arg
slice			::= expr slice_extras | slice_extras | expr
slices			::= slices "," slice | slice
reference		::= "[" slices "]"
arg_pair		::= NAME ":" expr
plain_arg_list	::= plain_arg_list "," expr | expr
arg_list		::= arg_list "," arg_pair | plain_arg_list | arg_pair
args			::= "(" arg_list ") | "(" ")"
suffix			::= reference | args | "." NAME
raw_primary		::= "(" expr ")" | complex | INTEGER | FLOAT | STRING | NAME
primary			::= primary suffix | raw_primary
prefix			::= "+" | "-" | "!" | "~" | "++" | "--" | "@" | "^" | "&"
ops1			::= "**"
ops2			::= "*" | "/" | "\" | "%"
ops3			::= "+" | "-"
ops4			::= "<<" | ">>"
ops5			::= "&"
ops6			::= "^"
ops7			::= "|"
ops8			::= "as"
ops9			::= "==" | "!=" | "<" | "<=" | ">" | ">="
ops10			::= "&&"
ops11			::= "||"
ops12			::= "is" | "!is"
ops13			::= "in" | "!in"
ops14			::= "and" | "or"
assign_ops		::= "=" | "**=" | "*=" | "/=" | "\=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" | "&&=" | "||="
factor			::= prefix primary | primary
expr1			::= factor ops1 expr1 | factor
expr2			::= expr2 ops2 expr1 | expr1
expr3			::= expr3 ops3 expr2 | expr2
expr4			::= expr4 ops4 expr3 | expr3
expr5			::= expr5 ops5 expr4 | expr4 
expr6			::= expr6 ops6 expr5 | expr5
expr7			::= expr7 ops7 expr6 | expr6
expr8			::= expr8 ops8 expr7 | expr7
expr9			::= expr9 ops9 expr8 | expr8
expr10			::= expr10 ops10 expr9 | expr9
expr11			::= expr11 ops11 expr10 | expr10
expr12			::= expr12 ops12 expr11 | expr11
expr13			::= expr13 ops13 expr12 | expr12
expr14			::= expr14 ops14 expr13 | expr13
param_pair		::= NAME "=" expr
plain_param_list::=	param_list1 "," NAME | NAME
def_param_list	::= param_list2 "," param_pair | param_list1 | param_pair
extra_param_list::= param_list2 "," NAME "..." | param_list2 | NAME "..."
key_param_list	::= param_list4 "," NAME | param_list4 "," param_pair | param_list3
param_list		::= param_list4 "," NAME "*..." | param_list4 | NAME "*..."
params			::= "(" param_list ")" | "(" ")"
expr			::= factor assign_ops expr | "/\" params block | expr14
simple			::= expr | "break" | "continue" | "return" expr | "return"
stmnts			::= stmnts ending stmnt | stmnts ending | stmnt | ending
block			::= ":" stmnts ".." | ":" ".."
if_condition	::= expr | "else"
if_guard		::= if_condition block
if_guards		::= if_guards if_guard | if_guard
if_stmnt 		::= "if" if_guards ".."
case_condition	::= "eq" expr | "in" expr | "st" expr | "else"
case_guard		::= case_condition block
case_guards		::= case_guards case_guard | case_guard
case_stmnt		::= "case" expr "of" case_guards ".."
while_stmnt		::= "while" expr block
do_while_stmnt	::= "do" block "while" expr ".."
for_stmnt		::= "for" factor "in" expr block
func_def		::= "func" NAME params block
base_list		::= base_list "," NAME | NAME
base_classes	::= "(" base_list ")" | "(" ")"
class_head		::= "class" NAME base_classes | "class" NAME
in_class_stmnt	::= expr | func_def | class_def
in_class_stmnts	::= in_class_stmnts in_class_stmnt | in_class_stmnt
class_body		::= ":" in_class_stmnts ".." | ":" ".."
class_def		::= class_head class_body
stmnt			::= simple | block | if_stmnt | case_stmnt | while_stmnt | do_while_stmnt | for_stmnt | func_def | class_def
path			::= path "." NAME | NAME
import			::= "import" path
main			::= import | stmnt
ending			::= ";" | EOL
program			::= main ending | ending
